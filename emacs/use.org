#+TITLE: 3RD PARTY PACKAGE CONFIGURATION
#+AUTHOR: Toby Slight
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle ~/.emacs.d/use.el
#+PROPERTY: header-args+ :tangle-mode (identity #o644)
#+OPTIONS: toc:t
* CONTENTS:TOC_5_gh:
- [[#ace-window][ACE WINDOW]]
- [[#amx][AMX]]
- [[#anaconda-mode][ANACONDA MODE]]
- [[#ansible][ANSIBLE]]
   - [[#ansible-doc][ANSIBLE DOC]]
- [[#async][ASYNC]]
- [[#browse-kill-ring][BROWSE KILL RING]]
- [[#change-inner][CHANGE INNER]]
- [[#company][COMPANY]]
   - [[#company-anaconda][COMPANY ANACONDA]]
   - [[#company-go][COMPANY GO]]
   - [[#company-terraform][COMPANY TERRAFORM]]
- [[#default-text-scale][DEFAULT TEXT SCALE]]
- [[#diminish][DIMINISH]]
- [[#docker][DOCKER]]
- [[#dockerfile-mode][DOCKERFILE MODE]]
- [[#doom-themes][DOOM THEMES]]
- [[#dot-mode][DOT MODE]]
- [[#exec-path-from-shell][EXEC PATH FROM SHELL]]
- [[#flx-ido][FLX IDO]]
- [[#flycheck][FLYCHECK]]
- [[#git-timemachine][GIT TIMEMACHINE]]
- [[#gitlab-ci-mode][GITLAB CI MODE]]
- [[#go-mode][GO MODE]]
- [[#hungry-delete][HUNGRY DELETE]]
- [[#ibuffer-vc][IBUFFER VC]]
- [[#ido-completing-read][IDO COMPLETING READ+]]
- [[#iedit][IEDIT]]
- [[#js2-mode][JS2 MODE]]
- [[#js2-refactor][JS2 REFACTOR]]
- [[#json-mode][JSON MODE]]
- [[#json-navigator][JSON NAVIGATOR]]
- [[#lazygit][LAZYGIT]]
- [[#magit][MAGIT]]
- [[#makefile-executor][MAKEFILE EXECUTOR]]
- [[#markdown-mode][MARKDOWN MODE]]
- [[#nix-mode][NIX MODE]]
- [[#nodejs-repl][NODEJS REPL]]
- [[#org][ORG]]
   - [[#bullets][BULLETS]]
   - [[#htmlize][HTMLIZE]]
   - [[#toc][TOC]]
   - [[#latex][LATEX]]
- [[#paredit][PAREDIT]]
- [[#pdf-tools][PDF TOOLS]]
- [[#powershell][POWERSHELL]]
- [[#powerline][POWERLINE]]
- [[#projectile][PROJECTILE]]
- [[#py-autopep8][PY AUTOPEP8]]
- [[#restclient][RESTCLIENT]]
- [[#slime][SLIME]]
- [[#systemd][SYSTEMD]]
- [[#terraform-mode][TERRAFORM MODE]]
- [[#undo-tree][UNDO TREE]]
- [[#web-mode][WEB MODE]]
- [[#wgrep][WGREP]]
- [[#which-key][WHICH KEY]]
- [[#yaml-mode][YAML MODE]]
- [[#yasnippet][YASNIPPET]]
   - [[#yasnippet-snippets][YASNIPPET SNIPPETS]]

* ACE WINDOW

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind*
    ("C-x o" . ace-window)
    ("C-x 0" . ace-delete-window)
    ("C-x 1" . ace-delete-other-windows)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    ;; (setq aw-background nil)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:foreground
            "green"
            ;; :background
            ;; "black"
            :height
            2.0))))))
#+END_SRC
* AMX

#+BEGIN_SRC emacs-lisp
  (use-package amx
    :ensure t
    :bind*
    ("M-x" . amx))
#+END_SRC

* ANACONDA MODE

#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :after python-mode
    :hook
    (python-mode . anaconda-mode)
    (python-mode . anaconda-eldoc-mode))
#+END_SRC

* ANSIBLE

#+BEGIN_SRC emacs-lisp
  (use-package ansible
    :ensure t
    :defer t
    :mode
    "\\-pb.yaml\\'"
    "\\-pb.yml\\'"
    "\\.pb.yaml\\'"
    "\\.pb.yml\\'")
#+END_SRC

** ANSIBLE DOC

#+BEGIN_SRC emacs-lisp
  (use-package ansible-doc
    :ensure t
    :after ansible)
#+END_SRC

* ASYNC

#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :defer t
    :config
    (async-bytecomp-package-mode 1))
#+END_SRC
* BROWSE KILL RING

#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :bind*
    ("M-y" . browse-kill-ring))
#+END_SRC

* CHANGE INNER

#+BEGIN_SRC emacs-lisp
  (use-package change-inner
    :ensure t
    :bind
    ("M-i" . change-inner)
    ("M-o" . change-outer))
#+END_SRC

* COMPANY

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :diminish company-mode
    :hook
    (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 2
          company-idle-delay 0.2))
#+END_SRC

** COMPANY ANACONDA

#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :ensure t
    :after (:all company-mode anaconda-mode))
#+END_SRC

** COMPANY GO

#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :ensure t
    :after company-mode go-mode)
#+END_SRC

** COMPANY TERRAFORM

#+BEGIN_SRC emacs-lisp
  (use-package company-terraform
    :ensure t
    :after (:all company-mode terraform-mode))
#+END_SRC

* DEFAULT TEXT SCALE

#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :ensure t
    :bind*
    ("C-M-=" . default-text-scale-increase)
    ("C-M--" . default-text-scale-decrease)
    ("C-M-0" . default-text-scale-reset))
#+END_SRC

* DIMINISH

[[https://www.wisdomandwonder.com/link/10214/httpsgithub-commagnars-emacs-dblobmastersite-lispdiminish-ell87why-you-cant-diminish-auto-fill-mode][Why you can't diminish auto-fill-mode...]]
https://emacs.stackexchange.com/questions/22531/diminish-org-indent-mode

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :defer 2
    :diminish abbrev-mode
    :diminish auto-fill-function ;; wtf?!
    :diminish eldoc-mode
    :diminish hs-minor-mode
    :diminish highlight-changes-mode
    :diminish my/key-mode
    :diminish org-indent-mode
    :diminish org-src-mode
    :diminish subword-mode
    :hook
    (my/key-mode . (lambda () (diminish 'my/key-mode)))
    (org-indent-mode . (lambda () (diminish 'org-indent-mode)))
    (hs-minor-mode . (lambda () (diminish 'hs-minor-mode))))
#+END_SRC

* DOCKER

#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c C-d" . docker))
#+END_SRC

* DOCKERFILE MODE

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :defer t )
#+END_SRC

* DOOM THEMES

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :defer t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* DOT MODE

#+BEGIN_SRC emacs-lisp
  (use-package dot-mode
    :ensure t
    :diminish dot-mode
    :config
    (global-dot-mode))
#+END_SRC

* EXEC PATH FROM SHELL

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :defer t
    :init
    (setq exec-path-from-shell-check-startup-files 'nil)
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "PYTHONPATH"))
#+END_SRC

* FLX IDO

#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure t
    :config
    (flx-ido-mode 1)
    (setq ido-enable-flex-matching t)
    ;; disable ido faces to see flx highlights.
    (setq ido-use-faces nil))
#+END_SRC

* FLYCHECK

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish flycheck-mode
    :hook
    (prog-mode . flycheck-mode)
    :config
    (flycheck-add-mode 'javascript-eslint 'web-mode))
#+END_SRC

* GIT TIMEMACHINE

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :defer t)
#+END_SRC
* GITLAB CI MODE

#+BEGIN_SRC emacs-lisp
  (use-package gitlab-ci-mode
    :ensure t
    :defer t
    :mode
    "\\.gitlab-ci.yaml\\'"
    "\\.gitlab-ci.yml\\'")
#+END_SRC

* GO MODE

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :defer t
    :config
    (add-hook 'go-mode-hook
              (lambda ()
                (setq indent-tabs-mode 1)
                (setq tab-width 2))))
#+END_SRC

* HUNGRY DELETE

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :defer 6
    :diminish hungry-delete-mode
    :config
    (global-hungry-delete-mode))
#+END_SRC

* IBUFFER VC

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :ensure t
    :defer t
    :init
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic))))
    :config
    (setq ibuffer-formats
          '((mark modified read-only vc-status-mini " "
                  (name 18 18 :left :elide)
                  " "
                  (size 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  (vc-status 16 16 :left)
                  " "
                  vc-relative-file))))
#+END_SRC

* IDO COMPLETING READ+

#+BEGIN_SRC emacs-lisp
  (use-package ido-completing-read+
    :ensure t
    :config
    (ido-ubiquitous-mode 1))
#+END_SRC

* IEDIT

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :bind
    ("M-%" . iedit-mode))
#+END_SRC

* JS2 MODE

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :hook
    (js-mode . js2-minor-mode)
    (js2-mode . js2-imenu-extras-mode)
    :mode
    "\\.js\\'")
#+END_SRC

* JS2 REFACTOR

#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :ensure t
    :hook
    (js2-mode . js2-refactor-mode)
    :bind
    (:map
     js2-mode-map
     ("C-k" . js2r-kill))
    :config
    (js2r-add-keybindings-with-prefix "C-c C-j"))
#+END_SRC

* JSON MODE

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :defer t
    :config
    (add-to-list 'auto-mode-alist
                 '("\\.json\\'" . (lambda ()
                                    (json-mode)
                                    (json-pretty-print (point-min) (point-max))
                                    (goto-char (point-min))
                                    (set-buffer-modified-p nil)))))
#+END_SRC

* JSON NAVIGATOR

#+BEGIN_SRC emacs-lisp
  (use-package json-navigator
    :ensure t
    :defer t)
#+END_SRC
* LAZYGIT

#+begin_src emacs-lisp
  (use-package lazygit
    :load-path "~/src/gitlab/tspub/lisp/lazygit")

  (use-package lazygitlab
    :after lazygit
    :bind
    ("C-c g l a" . lazygitlab-clone-or-pull-all)
    ("C-c g l c" . lazygitlab-clone-or-pull-project)
    ("C-c g l g" . lazygitlab-clone-or-pull-group)
    ("C-c g l r" . lazygitlab-retriever)
    :config
    (defalias 'gl/api 'lazygitlab-retriever)
    (defalias 'gl/all 'lazygitlab-clone-or-pull-all)
    (defalias 'gl/grp 'lazygitlab-clone-or-pull-group)
    (defalias 'gl/repo 'lazygitlab-clone-or-pull-project))

  (use-package lazygithub
    :after lazygit
    :bind
    ("C-c g h a" . lazygithub-clone-or-pull-all)
    ("C-c g h c" . lazygithub-clone-or-pull-repo)
    ("C-c g h r" . lazygithub-retriever)
    :config
    (defalias 'gh/api 'lazygithub-retriever)
    (defalias 'gh/all 'lazygithub-clone-or-pull-all)
    (defalias 'gh/repo 'lazygithub-clone-or-pull-repo))
#+end_src

* MAGIT

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    ("C-x C-g" . magit-dispatch)
    ("C-c C-g" . magit-list-repositories)
    :init
    (setq magit-repository-directories `(("~/src/gitlab" . 10)))
    (setq magit-repolist-columns
          '(("Name" 25 magit-repolist-column-ident)
            ;; ("Version" 25 magit-repolist-column-version)
            ("Pull" 5 magit-repolist-column-unpulled-from-upstream)
            ("Push" 5 magit-repolist-column-unpushed-to-upstream)
            ("Commit" 8 magit-repolist-column-dirty t)
            ("Path" 99 magit-repolist-column-path)))
    :config
    (setq magit-clone-set-remote.pushDefault t)
    (setq magit-completing-read-function 'magit-ido-completing-read))
#+END_SRC

* MAKEFILE EXECUTOR

Interactively selecting a make target and running it. Bound to C-c C-e in
makefile-mode when makefile-executor-mode is enabled.

Re-running the last execution. We usually run things in Makefiles many times
after all! Bound to C-c C-c in makefile-mode when makefile-executor-mode is
enabled.

Running a makefile target in a dedicated buffer. Useful when starting services
and other long-running things! Bound to C-c C-d in makefile-mode when
makefile-executor-mode is enabled.

Calculation of variables et.c.; $(BINARY) will show up as what it evaluates to.

*If projectile is installed, execution from any buffer in a project. If more*
*than one Makefile is found, an interactive prompt for one is shown. This is*
*added to the projectile-commander on the m key.* - /So Nice!/

#+begin_src emacs-lisp :tangle no
  (use-package makefile-executor
    :ensure t
    :hook
    (makefile-mode . makefile-executor-mode))
#+end_src

* MARKDOWN MODE

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

* NIX MODE

#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :ensure t
    :defer t)
#+END_SRC

* NODEJS REPL

#+BEGIN_SRC emacs-lisp
  (use-package nodejs-repl
    :ensure t
    :defer t
    :bind
    (:map js2-mode-map
          ("C-x C-e" . nodejs-repl-send-last-expression)
          ("C-c C-j" . nodejs-repl-send-line)
          ("C-c SPC" . nodejs-repl-send-region)
          ("C-c C-b" . nodejs-repl-send-buffer)
          ("C-c C-f" . nodejs-repl-load-file)
          ("C-c C-z" . nodejs-repl-switch-to-repl)))
#+END_SRC
* ORG
** BULLETS

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :defer t
    :if window-system
    :ensure t
    :hook
    (org-mode . org-bullets-mode))
#+END_SRC

** HTMLIZE

#+BEGIN_SRC emacs-lisp
  ;; source code syntax highlighting when html exporting
  (use-package htmlize
    :defer t
    :ensure t)
#+END_SRC

** TOC

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :defer t
    :ensure t
    :hook
    (org-mode . toc-org-enable))
#+END_SRC

** LATEX

#+BEGIN_SRC emacs-lisp
  (use-package ox-latex
    :defer t
    :config
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    (setq org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
#+END_SRC

* PAREDIT

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :diminish paredit-mode
    :bind
    ("C-c t p" . paredit-mode)
    ("C-c (" . paredit-forward-slurp-sexp)
    ("C-c )" . paredit-backward-slurp-sexp)
    ("C-c <" . paredit-forward-barf-sexp)
    ("C-c >" . paredit-backward-barf-sexp)
    ("C-c M-s" . paredit-splice-sexp)
    :hook
    (common-lisp-mode . paredit-mode)
    (emacs-lisp-mode . paredit-mode)
    (lisp-mode . paredit-mode)
    :config
    (unbind-key "M-s" paredit-mode-map))
#+END_SRC
* PDF TOOLS

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :defer t)
#+end_src

* POWERSHELL

#+begin_src emacs-lisp
  (use-package powershell
    :ensure t
    :mode (("\\.ps1\\'" . powershell-mode)))
#+end_src

* POWERLINE

#+begin_src emacs-lisp
  (use-package powerline
    :ensure t
    :config
    ;; (setq powerline-default-separator 'bar)
    (powerline-default-theme))
#+end_src

* PROJECTILE

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode)
    (setq projectile-completion-system 'ido)
    (when (require 'magit nil t)
      (mapc #'projectile-add-known-project
            (mapcar #'file-name-as-directory (magit-list-repos)))
      ;; Optionally write to persistent `projectile-known-projects-file'
      (projectile-save-known-projects)))
#+END_SRC

* PY AUTOPEP8

#+begin_src emacs-lisp
  (use-package blacken
    :ensure t
    :hook
    (python-mode . blacken-mode))
#+end_src

* RESTCLIENT

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :defer t)
#+END_SRC
* SLIME

#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :defer t
    :config
    (setq inferior-lisp-program "sbcl")
    (load (expand-file-name "~/quicklisp/slime-helper.el")))
#+end_src

#+begin_src emacs-lisp
  (use-package slime-company
    :ensure t
    :defer t
    :config
    (slime-setup '(slime-company)))
#+end_src

* SYSTEMD

#+BEGIN_SRC emacs-lisp
  (use-package systemd
    :ensure t
    :defer t)
#+END_SRC

* TERRAFORM MODE

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t
    :defer t)
#+END_SRC

* UNDO TREE

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :bind
    ("C-?" . undo-tree-redo)
    ("M-_" . undo-tree-redo)
    ("C-x u" . undo-tree-visualize)
    :config
    (global-undo-tree-mode 1)
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-history-directory-alist
          `(("." . ,(expand-file-name "~/.emacs.d/undos/")))))
#+END_SRC

* WEB MODE

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    "\\.phtml\\'"
    "\\.tpl\\.php\\'"
    "\\.[agj]sp\\'"
    "\\.as[cp]x\\'"
    "\\.erb\\'"
    "\\.mustache\\'"
    "\\.djhtml\\'"
    "\\.html\\.twig\\'"
    "\\.html?\\'"
    "\\.php?\\'"
    "\\.css?\\'"
    :hook
    (web-mode . js2-minor-mode)
    :config
    (setq web-mode-content-type "jsx")
    (setq web-mode-enable-auto-quoting nil)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-enable-block-face t)
    (setq web-mode-enable-part-face t)
    (setq web-mode-enable-comment-keywords t)
    (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-ternary" . nil)))
#+END_SRC

* WGREP

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t
    :defer t)
#+END_SRC

* WHICH KEY

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer 5
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

* YAML MODE

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :defer t)
#+END_SRC

* YASNIPPET

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :diminish yas-minor-mode
    :hook
    (prog-mode . yas-minor-mode))
#+END_SRC

** YASNIPPET SNIPPETS

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :defer t)

  (use-package yasnippet-classic-snippets
    :ensure t
    :defer t)
#+END_SRC
