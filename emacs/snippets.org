#+TITLE: CUSTOM YASNIPPET SNIPPETS
#+AUTHOR: Toby Slight
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle-mode (identity #o600)
#+OPTIONS: toc:t

* POWERSHELL
** BEGIN PROCESS END
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/begin_process_end
  # -*- mode: snippet -*-
  # name: begin-process-end
  # key: bpe
  # --
  begin {
      ${1:}
  }

  process {
      $0
  }

  end {
      ${2:}
  }
#+END_SRC
** CMDLETBINDING
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/cmdletbinding
  # -*- mode: snippet -*-
  # name: cmdletbinding
  # key: cmd
  # --
  [CmdletBinding()]
  Param (
      $0
  )
#+END_SRC
** DOCSTRING

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/comment-based-help
  # -*- mode: snippet -*-
  # name: comment-based-help
  # key: cbh
  # --
  <#
  .SYNOPSIS
  ${1:Brief description}

  .DESCRIPTION
  ${2:Longer description}

  .PARAMETER ${3:Foobar}
  ${4:Descriptions of parameter Foobar}

  .EXAMPLE
  ${5:Actual example}

  .LINK
  ${6:Related URL links}
  #>
#+END_SRC

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/cbh-param
  # -*- mode: snippet -*-
  # name: cbh-param
  # key: cbhpar
  # --
  .PARAMETER ${1:Foobar}
  ${2:Description of parameter Foobar}
#+END_SRC
** FOR
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/for
# -*- mode: snippet -*-
# name: for
# key: for
# --
for ($${1:i} = ${2:0}; $${3:i} -${4:gt} ${5:4}; ${6:i}${7:++}) {
    $0
}
#+END_SRC
** FOREACH
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/foreach
# -*- mode: snippet -*-
# name: foreach
# key: fore
# --
foreach ($${1:element} in $${2:array}) {
    $0
}
#+END_SRC
** FOREACH OBJECT
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/foreach-object
# -*- mode: snippet -*-
# name: foreach-object
# key: %
# --
ForEach-Object {
    $_.${1:property} $0
}
#+END_SRC
** FUNCTION
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/function
# -*- mode: snippet -*-
# name: function
# key: fun
# --
function ${1:Verb}-${2:Noun} {
    $0
}
#+END_SRC
** IF
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/if
# -*- mode: snippet -*-
# name: if
# key: if
# --

if ($${1:condition}) {
   $0
}
#+END_SRC
** IF ELSE
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/ifelse
# -*- mode: snippet -*-
# name: ifelse
# key: ifel
# --

if ($${1:condition}) {
   ${2:action}
} else {
   $0
}
#+END_SRC
** MANIFEST

These can also be generated by running ~New-ModuleManifest~

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/manifest
  # -*- mode: snippet -*-
  # name: manifest
  # key: man
  # --
  <#
  Can also be generated by running:
  New-ModuleManifest
  #>
  @{
      RootModule		= '${1:ModuleName}'
      ModuleVersion	= '0.0.1'
      Author		= 'Toby Slight'
      Copyright		= '(c) Toby Slight. All rights reserved.'
      Description		= '${2:Description}'
      RequiredModules	= @(
          $0
      )
      FunctionsToExport	= '*'
      CmdletsToExport	= '*'
      VariablesToExport	= '*'
      AliasesToExport	= '*'
      PrivateData		= @{
          PSData		= @{
          }
      }
  }

#+END_SRC
** MODULE
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/module
  # -*- mode: snippet -*-
  # name: module
  # key: mod
  # --
  #region get public and private function definition files.
  $Public  = @(
      Get-ChildItem -Path $PSScriptRoot\Public\*.ps1 -ErrorAction SilentlyContinue
  )
  $Private = @(
      Get-ChildItem -Path $PSScriptRoot\Private\*.ps1 -ErrorAction SilentlyContinue
  )
  #endregion

  #region source the files
  foreach ($Function in @($Public + $Private)) {
      $FunctionPath = $Function.fullname
      try {
          . $FunctionPath # dot source function
      } catch {
          Write-Error -Message "Failed to import function at $($FunctionPath): $_"
      }
  }
  #endregion

  #region read in or create an initial config file and variable
  $0
  #endregion

  #region set variables visible to the module and its functions only
  $Date = Get-Date -UFormat "%Y.%m.%d"
  $Time = Get-Date -UFormat "%H:%M:%S"
  $Green = @{
      Background = 'Black'
      Foreground = 'Green'
  }
  $Cyan = @{
      Background = 'Black'
      Foreground = 'Cyan'
  }
  $Magenta = @{
      Background = 'Black'
      Foreground = 'Magenta'
  }
  #endregion

  #region export Public functions ($Public.BaseName) for WIP modules
  Export-ModuleMember -Function $Public.Basename
  #endregion
#+END_SRC
** CONFIG
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/config
  # -*- mode: snippet -*-
  # name: config
  # key: conf
  # --
  $ConfigFile = "Config.psd1"
  $Params     = @{
      BaseDirectory = $PSScriptRoot
      FileName      = $ConfigFile
  }

  if (Test-Path "$PSScriptRoot\\$ConfigFile") {
      try {
          $Config = Import-LocalizedData @Params
          $Config = Import-LocalizedData @Params
          foreach ($variable in $Config.keys) {
              Write-Verbose "Setting $var variable."
              New-Variable -Name "$variable" -Value $Config.$variable -Force
          }
      } catch {
          Write-Warning "Invalid configuration data in $ConfigFile."
          Write-Warning "Please fill out or correct $PSScriptRoot\\$ConfigFile."
          Write-Verbose $_.Exception.Message
          Write-Verbose $_.InvocationInfo.ScriptName
          Write-Verbose $_.InvocationInfo.PositionMessage
      }
  } else {
      @"
  @{
      ${1:Config Variable} = ""
  }
  "@ | Out-File -Encoding UTF8 -FilePath "$PSScriptRoot\\$ConfigFile"
      Write-Warning "Generated $PSScriptRoot\\$ConfigFile."
      Write-Warning "Please edit $ConfigFile and re-import module."
  }
#+END_SRC
** PARAMETER
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/param
# -*- mode: snippet -*-
# name: parameter
# key: par
# --
[Parameter(Mandatory${1:,})]
[${2:string}]\$${3:Foobar}
$0
#+END_SRC
** PARAMETER VALUE FROM PIPELINE
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/param_pipeline
# -*- mode: snippet -*-
# name: parameter_pipeline
# key: parp
# --
[Parameter(Mandatory,ValueFromPipeline)]
[${1:string}]\$${2:Foobar}
$0
#+END_SRC
** PARAMETER VALUE FROM PIPELINE PROPERTY NAME
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/param_pipeline_property
# -*- mode: snippet -*-
# name: parameter_pipeline_property
# key: parpp
# --
[Parameter(Mandatory,ValueFromPipelineByPropertyName)]
[${1:string}]\$${2:Foobar}
$0
#+END_SRC
** SUPPORTS SHOULD PROCESS
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/should_process
# -*- mode: snippet -*-
# name: should_process
# key: ssp
# --
  [CmdletBinding(SupportsShouldProcess)]
  Param (
      $0
  )
#+END_SRC
** WARNINGS
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/warning
  # -*- mode: snippet -*-
  # name: warning
  # key: war
  # --
  Write-TSWarning $_ -Verbose:$VerbosePreference
#+END_SRC
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/custom-warning
  # -*- mode: snippet -*-
  # name: custom-warning
  # key: warn
  # --
  $Params = @{
      Exception = $_
      Warning = \"${1:Message}\"
      Verbose = $VerbosePreference
  }
  Write-TSWarning @Params
  $0
#+END_SRC
** WHERE OBJECT
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/powershell-mode/where
  # -*- mode: snippet -*-
  # name: where
  # key: ?
  # --
  Where-Object {
      $_.${1:property} $0
  }
#+END_SRC
* ELISP
** BOILERPLATE

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/emacs-lisp-mode/boilerplate
  # -*- mode: snippet -*-
  # name: boilerplate
  # key: bp
  # --
  ;;; `(file-name-nondirectory (buffer-file-name))` --- ${1:summary}

  ;;; Commentary:

  ;; Copyright (C) `(format-time-string "%Y")` `user-full-name`
  ;; Author: `user-full-name` `user-mail-address`
  ;; Version: 0.0.1
  ;; Package-Requires: ${2:depandancies}
  ;; URL: https://github.com/tslight/${3:repo}

  ;;; Code:
  $0
  (provide \'`(file-name-sans-extension (file-name-nondirectory (buffer-file-name)))`)
  ;;; `(file-name-nondirectory (buffer-file-name))` ends here
#+END_SRC
