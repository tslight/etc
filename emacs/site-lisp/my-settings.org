#+TITLE: SETTINGS
#+AUTHOR: Toby Slight
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle ~/.emacs.d/site-lisp/my-settings.el
#+PROPERTY: header-args+ :tangle-mode (identity #o644)
#+OPTIONS: toc:t
* CONTENTS:TOC_5_gh:
- [[#abbrevs][ABBREVS]]
- [[#auto-window-vscroll][AUTO WINDOW VSCROLL]]
- [[#autosave][AUTOSAVE]]
- [[#backups][BACKUPS]]
- [[#bells][BELLS]]
- [[#clipboard][CLIPBOARD]]
- [[#display-line-numbers][DISPLAY LINE NUMBERS]]
- [[#doc-view][DOC VIEW]]
- [[#ediff][EDIFF]]
- [[#editing][EDITING]]
- [[#encoding][ENCODING]]
- [[#epa][EPA]]
- [[#erc][ERC]]
- [[#eshell][ESHELL]]
- [[#gnus][GNUS]]
- [[#highlight-changes][HIGHLIGHT CHANGES]]
- [[#history][HISTORY]]
- [[#loading][LOADING]]
- [[#misc][MISC]]
- [[#mouse][MOUSE]]
- [[#programming][PROGRAMMING]]
- [[#python][PYTHON]]
- [[#recentf][RECENTF]]
- [[#registers][REGISTERS]]
- [[#scrolling][SCROLLING]]
- [[#startup][STARTUP]]
- [[#tabs-vs-spaces][TABS VS SPACES]]
- [[#term-buffer-size][TERM BUFFER SIZE]]
- [[#tramp][TRAMP]]
- [[#undo-limits][UNDO LIMITS]]
- [[#uniquify][UNIQUIFY]]
- [[#user][USER]]
- [[#version-control][VERSION CONTROL]]
- [[#windows][WINDOWS]]
- [[#yes-or-no][YES OR NO]]

* ABBREVS

#+BEGIN_SRC emacs-lisp
  (setq abbrev-file-name (concat user-emacs-directory "abbrevs"))
  (setq save-abbrevs 'silently)
#+END_SRC

* AUTO WINDOW VSCROLL

#+BEGIN_SRC emacs-lisp
  (setq auto-window-vscroll nil)
#+END_SRC

* AUTOSAVE

#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  (setq auto-save-timeout 5)
#+END_SRC

* BACKUPS

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq backup-by-copying t) ;; copy files, don't rename them.
  (setq delete-old-versions t)
  (setq kept-new-versions 12)
  (setq kept-old-versions 12)
#+END_SRC

* BELLS

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq visible-bell 1)
#+END_SRC

* CLIPBOARD

#+BEGIN_SRC emacs-lisp
  (setq select-enable-clipboard t)
  (setq select-enable-primary t)
  (setq x-select-enable-clipboard-manager nil)
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
* DISPLAY LINE NUMBERS

This is new in Emacs 26 :-)

#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers 'relative)
#+END_SRC

* DOC VIEW

#+BEGIN_SRC emacs-lisp
  (setq doc-view-continuous t)
  (setq doc-view-resolution 300)
#+END_SRC

* EDIFF

#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-diff-options "-w")

  (add-hook 'ediff-after-quit-hook-internal 'winner-undo)

  (defun disable-y-or-n-p (orig-fun &rest args)
    (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
      (apply orig-fun args)))

  (advice-add 'ediff-quit :around #'disable-y-or-n-p)
#+END_SRC

* EDITING

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1) ;; move by camel case, etc
  (global-auto-revert-mode 1) ;; reload if file changed on disk
  (pending-delete-mode 1) ;; remove selected region if typing
  (set-default 'truncate-lines t)
  (setq-default fill-column 79)
  (setq backward-delete-char-untabify-method 'all)
  (setq create-lockfiles nil) ;; prevent creation of .#myfile.ext
  (setq require-final-newline t) ;; useful for crontab
  (setq set-mark-command-repeat-pop t) ;; repeating C-SPC after popping, pops it
  (show-paren-mode 1)
#+END_SRC

* ENCODING

#+BEGIN_SRC emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq-default default-buffer-file-coding-system 'utf-8-unix)
  (setq coding-system-for-read 'utf-8-unix)
  (setq coding-system-for-write 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+END_SRC

* EPA

#+BEGIN_SRC emacs-lisp
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  (setf epa-pinentry-mode 'loopback)
#+END_SRC

* ERC

#+BEGIN_SRC emacs-lisp
  (setq erc-autojoin-channels-alist '(("freenode.net"
                                       "#org-mode"
                                       "#emacs")))
  (setq erc-fill-column 80)
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
  (setq erc-input-line-position -2)
  (setq erc-keywords '("not2b"))
  (setq erc-nick "not2b")
  (setq erc-prompt-for-password t)
  (setq erc-track-enable-keybindings t)
#+END_SRC

* ESHELL

#+BEGIN_SRC emacs-lisp
  (require 'em-smart)
  (setq eshell-history-size 2048)
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
  (my/bind-always "C-c e s" eshell)
#+END_SRC

* GNUS

#+BEGIN_SRC emacs-lisp
  ;; (require 'nnir)
  (setq gnus-init-file "~/.emacs.d/init.el")
  (setq gnus-home-directory "~/.emacs.d/")
  (setq gnus-completing-read-function 'gnus-ido-completing-read)
  (setq message-directory "~/.emacs.d/mail")
  (setq gnus-directory "~/.emacs.d/news")
  (setq nnfolder-directory "~/.emacs.d/mail/archive")
  (setq gnus-use-full-window nil)
  (setq gnus-select-method '(nntp "news.gnus.org"))
  (setq gnus-summary-thread-gathering-function
        'gnus-gather-threads-by-subject)
  (setq gnus-thread-hide-subtree t)
  (setq gnus-thread-ignore-subject t)
#+END_SRC

* HIGHLIGHT CHANGES

#+BEGIN_SRC emacs-lisp
  (global-highlight-changes-mode)
  (setq highlight-changes-visibility-initial-state nil)
#+END_SRC

* HISTORY

#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq savehist-save-minibuffer-history 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq bookmark-save-flag 1) ;; always save bookmarks to file
  (save-place-mode 1)
  (setq save-place-file (concat user-emacs-directory "saveplace.el"))
#+END_SRC

* LOADING

#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t) ;; if init.elc is older, use newer init.el
#+END_SRC

* MISC

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
  (setq custom-file (make-temp-file "emacs-custom"))
  (setq disabled-command-function nil) ;; enable all "advanced" features
  (setq message-log-max 10000)
  (setq apropos-do-all t) ;; doesn't seem to be documented anywhere..
#+END_SRC

* MOUSE

#+BEGIN_SRC emacs-lisp
  (setq mouse-yank-at-point t)
#+END_SRC

* PROGRAMMING

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "bsd")
  (setq c-basic-offset 4)
  (setq css-indent-offset 2)
  (setq js-indent-level 2)
#+END_SRC

* PYTHON

#+BEGIN_SRC emacs-lisp
  (setq python-fill-docstring-style 'django)
  (setq fill-column 79)
  (when (executable-find "ipython")
    (setq python-shell-interpreter "ipython"))
#+END_SRC

* RECENTF

#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-exclude '(".*init\.el"
                          ".*\/my-.*\.el"
                          "^/var/folders\\.*"
                          "COMMIT_EDITMSG\\'"
                          ".*-autoloads\\.el\\'"
                          "[/\\]\\.elpa/"))
  (setq recentf-max-menu-items 128)
  (setq recentf-max-saved-items 256)
#+END_SRC

* REGISTERS

#+BEGIN_SRC emacs-lisp
  (set-register ?h (cons 'file "~/"))
  (set-register ?s (cons 'file "~/src/"))
#+END_SRC

* SCROLLING

#+BEGIN_SRC emacs-lisp
  (setq scroll-step 4)
  (setq scroll-margin 6)
  (setq scroll-conservatively 8)
  (setq scroll-preserve-screen-position t)
#+END_SRC

* STARTUP

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC

* TABS VS SPACES

#+begin_src emacs-lisp
  ;; make indent commands use space only (never tab character)
  ;; emacs 23.1 to 26, default to t

  ;; If indent-tabs-mode is t, it means it may use tab, resulting mixed space and
  ;; tab
  (setq-default indent-tabs-mode nil)

  ;; make tab key always call a indent command.
  ;; (setq-default tab-always-indent t)

  ;; make tab key call indent command or insert tab character, depending on cursor position
  ;; (setq-default tab-always-indent nil)

  ;; make tab key do indent first then completion.
  (setq-default tab-always-indent 'complete)
#+end_src

* TERM BUFFER SIZE

#+BEGIN_SRC emacs-lisp
  (setq term-buffer-maximum-size 200000)
#+END_SRC

* TRAMP

#+BEGIN_SRC emacs-lisp
  (setq tramp-backup-directory-alist backup-directory-alist)
  (setq tramp-default-method "ssh")
  (setf tramp-persistency-file-name (concat temporary-file-directory "tramp-" (user-login-name)))
#+END_SRC

* UNDO LIMITS

#+BEGIN_SRC emacs-lisp
  (setq undo-limit 150000)
  (setq undo-strong-limit 300000)
#+END_SRC

* UNIQUIFY

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+END_SRC

* USER

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Toby Slight")
  (setq user-mail-address "tslight@pm.me")
#+END_SRC

* VERSION CONTROL

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
  (setq vc-make-backup-files t)
  (setq version-control t)
#+END_SRC

* WINDOWS

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode) (winner-mode 1))
  (setq split-width-threshold 160)
  (setq split-height-threshold 80)
#+END_SRC

* YES OR NO

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p) ;; never have to type full word
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
