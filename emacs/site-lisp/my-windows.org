#+TITLE: WINDOW FUNCTIONS
#+AUTHOR: Toby Slight
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle ~/.emacs.d/site-lisp/my-windows.el
#+PROPERTY: header-args+ :tangle-mode (identity #o644)
#+OPTIONS: toc:t
* CONTENTS:TOC_5_gh:
- [[#three-way-split][THREE WAY SPLIT]]
- [[#kill-buffer-other-window][KILL BUFFER OTHER WINDOW]]
- [[#last-window][LAST WINDOW]]
- [[#open-buffer-other-window][OPEN BUFFER OTHER WINDOW]]
- [[#prev-window][PREV WINDOW]]
- [[#recenter-window][RECENTER WINDOw]]
- [[#hsplit-last-buffer][HSPLIT LAST BUFFER]]
- [[#vsplit-last-buffer][VSPLIT LAST BUFFER]]
- [[#toggle-split][TOGGLE SPLIT]]
- [[#keybindings][KEYBINDINGS]]

* THREE WAY SPLIT

#+BEGIN_SRC emacs-lisp
  (defun my/three-way-split ()
    "Split the screen three ways."
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil)
    (switch-to-next-buffer)
    (split-window-horizontally)
    (other-window 1 nil)
    (switch-to-next-buffer)
    (balance-windows))
#+END_SRC

* KILL BUFFER OTHER WINDOW

#+BEGIN_SRC emacs-lisp
  (defun my/kill-buffer-other-window ()
    "Kill the buffer in the last used window."
    (interactive)
    ;; Window selection is used because point goes to a different window if more
    ;; than 2 windows are present
    (let ((current-window (selected-window))
          (other-window (get-mru-window t t t)))
      (select-window other-window)
      (kill-this-buffer)
      (select-window current-window)))
#+END_SRC

* LAST WINDOW

#+BEGIN_SRC emacs-lisp
  (defun my/last-window ()
    "Switch back and forth between two windows easily."
    (interactive)
    (let ((win (get-mru-window t t t)))
      (unless win (error "Last window not found"))
      (let ((frame (window-frame win)))
        (raise-frame frame)
        (select-frame frame)
        (select-window win))))
#+END_SRC

* OPEN BUFFER OTHER WINDOW

#+BEGIN_SRC emacs-lisp
  (defun my/open-buffer-other-window (buffer)
    "Open a buffer in another window without switching to it."
    (interactive "BBuffer: ")
    (switch-to-buffer-other-window buffer)
    (other-window -1))
#+END_SRC

* PREV WINDOW

#+BEGIN_SRC emacs-lisp
  (defun my/prev-window ()
    "Go the previously used window, excluding other frames."
    (interactive)
    (other-window -1))
#+END_SRC

* RECENTER WINDOw

#+BEGIN_SRC emacs-lisp
  (defun my/top-of-window ()
    "Shift current line to the top of the window-  i.e. zt in Vim"
    (interactive)
    (set-window-start (selected-window) (point)))

  (defun my/bottom-of-window ()
    "Shift current line to the bottom of the window- i.e. zb in Vim"
    (interactive)
    (my/top-of-window)
    (scroll-down (- (window-height) 3)))

  (defun my/scroll-line-up (n)
    "Equivalent of Ctrl-e in Vi."
    (interactive "p")
    (scroll-up n))

  (defun my/scroll-line-down (n)
    "Equivalent of Ctrl-y in Vi."
    (interactive "p")
    (scroll-down n))
#+END_SRC

* HSPLIT LAST BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/hsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer.
  With PREFIX stay in current buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
        (switch-to-next-buffer)))
#+END_SRC

* VSPLIT LAST BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/vsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer.
  With PREFIX stay in current buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))
#+END_SRC

* TOGGLE SPLIT

#+BEGIN_SRC emacs-lisp
  (defun my/toggle-split ()
    "Switch window split from horizontally to vertically, or vice
  versa.  Change right window to bottom, or change bottom window to
  right."
    (interactive)
    (require 'windmove)
    (let ((done))
      (dolist (dirs '((right . down) (down . right)))
        (unless done
          (let* ((win (selected-window))
                 (nextdir (car dirs))
                 (neighbour-dir (cdr dirs))
                 (next-win (windmove-find-other-window nextdir win))
                 (neighbour1 (windmove-find-other-window neighbour-dir win))
                 (neighbour2 (if next-win (with-selected-window next-win
                                            (windmove-find-other-window neighbour-dir next-win)))))
            ;;(message "win: %s\nnext-win: %s\nneighbour1: %s\nneighbour2:%s" win next-win neighbour1 neighbour2)
            (setq done (and (eq neighbour1 neighbour2)
                            (not (eq (minibuffer-window) next-win))))
            (if done
                (let* ((other-buf (window-buffer next-win)))
                  (delete-window next-win)
                  (if (eq nextdir 'right)
                      (split-window-vertically)
                    (split-window-horizontally))
                  (set-window-buffer (windmove-find-other-window neighbour-dir) other-buf))))))))
#+END_SRC

* KEYBINDINGS

#+BEGIN_SRC emacs-lisp
  (my/bind-always "C-x O" my/prev-window)
  (my/bind-always "C-c 3" my/vsplit-last-buffer)
  (my/bind-always "C-c 2" my/hsplit-last-buffer)
  (my/bind-always "M-<" my/top-of-window)
  (my/bind-always "M->" my/bottom-of-window)
  ;; I don't want these overwritten in every mode
  (my/bind "M-p" my/scroll-line-up)
  (my/bind "M-n" my/scroll-line-down)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-4-map "k" 'my/kill-buffer-other-window)
  (define-key ctl-x-4-map "o" 'my/open-buffer-other-window)
  (define-key ctl-x-4-map "s" 'my/toggle-split)
#+END_SRC
