#+TITLE: IDO CONFIGURATION
#+AUTHOR: Toby Slight
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle ~/.emacs.d/site-lisp/my-ido.el
#+PROPERTY: header-args+ :tangle-mode (identity #o644)
#+OPTIONS: toc:t
#+BEGIN_SRC emacs-lisp
  (require 'ido)
#+END_SRC
* CONTENTS:TOC_5_gh:
- [[#settings][SETTINGS]]
   - [[#vertical-ido][VERTICAL IDO]]
- [[#icomplete-setup][ICOMPLETE SETUP]]
- [[#functions][FUNCTIONS]]
   - [[#ido-find-recentf][IDO FIND RECENTF]]
   - [[#ido-kill-ring][IDO KILL RING]]
   - [[#ido-keys][IDO KEYS]]
- [[#keybindings][KEYBINDINGS]]
- [[#hooks][HOOKS]]
- [[#init][INIT]]

* SETTINGS

If non-nil, refer to past ("virtual") buffers as well as existing ones.

The options are:
  nil:  Do not use virtual buffers.
  t:    Always use virtual buffers.
  auto: Use virtual buffers if the current input matches no existing buffer.

This feature relies upon the ‘recentf’ package, which will be
enabled if this variable is configured to a non-nil value.

#+BEGIN_SRC emacs-lisp
  (setq ido-use-virtual-buffers 't) ;; show recent files too
#+END_SRC

Specify whether a new buffer is created if no buffer matches substring.
Choices are ‘always’ to create new buffers unconditionally, ‘prompt’ to ask
user whether to create buffer, or ‘never’ to never create new buffer.

#+BEGIN_SRC emacs-lisp
  (setq ido-create-new-buffer 'always)
#+END_SRC

Non-nil means only match if the entered text is a prefix of file name.  This
behavior is like the standard Emacs completion.  If nil, match if the entered
text is an arbitrary substring.  Value can be toggled within Ido using
‘ido-toggle-prefix’.

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-prefix t)
#+END_SRC

Non-nil means that Ido will do flexible string matching.  Flexible matching
means that if the entered string does not match any item, any item containing
the entered characters in the given sequence will match.

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching 't)
#+END_SRC

Automatically switch to merged work directories during file name input.  The
value is number of characters to type before switching to merged mode.  If
zero, the switch happens when no matches are found in the current directory.
Automatic merging is disabled if the value is negative.

#+BEGIN_SRC emacs-lisp
  (setq ido-auto-merge-work-directories-length -1)
#+END_SRC

Non-nil means that Ido shall look for a filename at point.  May use
‘ffap-guesser’ to guess whether text at point is a filename.  If found, use
that as the starting point for filename selection.

#+BEGIN_SRC emacs-lisp
  ;; (setq ido-use-filename-at-point 'ffap-guesser)
  (setq ido-use-filename-at-point 'nil)
#+END_SRC

** VERTICAL IDO

#+BEGIN_SRC emacs-lisp
  (setq ido-decorations (quote ("\n--> "
                                " "
                                "\n    "
                                "\n    ..."
                                "["  "]"
                                "  [No match]"
                                "  [Matched]"
                                "  [Not readable]"
                                "  [Too big]"
                                "  [Confirm]")))
#+END_SRC

* ICOMPLETE SETUP

#+BEGIN_SRC emacs-lisp
  (require 'icomplete)
  (setq icomplete-separator "\n")
  (setq icomplete-hide-common-prefix 'nil)
  (setq icomplete-in-buffer t)
#+END_SRC

* FUNCTIONS
** IDO FIND RECENTF

#+BEGIN_SRC emacs-lisp
  (defun my/ido-find-recentf ()
    "Use `ido-completing-read' to `find-file' a recent file."
    (interactive)
    (recentf-mode 1)
    (if (find-file (ido-completing-read "Recent: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
#+END_SRC

** IDO KILL RING

#+BEGIN_SRC emacs-lisp
  (defun my/ido-kill-ring ()
    "Use `ido-completing-read' to choose a `yank' from the `kill-ring'."
    (interactive)
    (let ((my-yank (ido-completing-read "Kill Ring: " kill-ring)))
      (insert my-yank)))
#+END_SRC

** IDO KEYS

#+BEGIN_SRC emacs-lisp
  (defun my/ido-keys ()
    "Custom ido keybindings."
    (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
    (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
#+END_SRC

* KEYBINDINGS

#+BEGIN_SRC emacs-lisp
  (my/bind-always "C-c r" my/ido-find-recentf)
  (my/bind-always "C-M-y" my/ido-kill-ring)
  (my/bind-always "M-x" (lambda () (interactive)
                   (call-interactively
                    (intern
                     (ido-completing-read
                      "M-x "
                      (all-completions "" obarray 'commandp))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key icomplete-minibuffer-map (kbd "C-f") 'icomplete-forward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-b") 'icomplete-backward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-n") 'icomplete-forward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-p") 'icomplete-backward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-s") 'icomplete-forward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-r") 'icomplete-backward-completions)
#+END_SRC

* HOOKS

#+BEGIN_SRC emacs-lisp
  (add-hook 'ido-minibuffer-setup-hook (lambda () (set (make-local-variable 'truncate-lines) nil)))
  (add-hook 'ido-setup-hook (lambda () (define-key ido-completion-map [tab] 'ido-complete)))
  (add-hook 'ido-setup-hook 'my/ido-keys)
#+END_SRC

* INIT

#+BEGIN_SRC emacs-lisp
  (icomplete-mode 1)
  (ido-mode 1)
#+END_SRC

Toggle use of Ido for all buffer/file reading.  With a prefix argument ARG,
enable this feature if ARG is positive, and disable it otherwise.  If called
from Lisp, enable the mode if ARG is omitted or nil.

#+BEGIN_SRC emacs-lisp
  (ido-everywhere 1)
#+END_SRC

When you call write-file 【Ctrl+x Ctrl+w】 (aka “save as”), when ido is on,
it'll make suggestions. This is annoying because usually you don't want the
name to be a existing file.

This needs to come after turning ~ido-mode~ on.

#+BEGIN_SRC emacs-lisp
  ;; stop ido suggestion when doing a save-as
  (define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil)
#+END_SRC
