#+TITLE: BUFFER FUNCTIONS
#+AUTHOR: Toby Slight
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle ~/.emacs.d/site-lisp/my-buffers.el
#+PROPERTY: header-args+ :tangle-mode (identity #o644)
#+OPTIONS: toc:t
* CONTENTS:TOC_5_gh:
- [[#fill-buffer][FILL BUFFER]]
- [[#indent-buffer][INDENT BUFFER]]
- [[#kill-this-buffer][KILL THIS BUFFER]]
- [[#last-buffer][LAST BUFFER]]
- [[#nuke-buffers][NUKE BUFFERS]]
- [[#save-buffers-silently][SAVE BUFFERS SILENTLY]]
- [[#search-all-buffers][SEARCH ALL BUFFERS]]
- [[#toggle-buffer][TOGGLE BUFFER]]
- [[#toggle-maximize-buffer][TOGGLE MAXIMIZE BUFFER]]
- [[#keybindings][KEYBINDINGS]]

* FILL BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/fill-buffer ()
    "Fill the contents of a buffer."
    (interactive)
    (fill-region (point-min) (point-max)))
#+END_SRC

* INDENT BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/indent-buffer ()
    "Indent the contents of a buffer."
    (interactive)
    (indent-region (point-min) (point-max)))
#+END_SRC

* KILL THIS BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/kill-this-buffer ()
    "Kill the current buffer. `kill-this-buffer' is unreliable..."
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC

* LAST BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/last-buffer ()
    "Switch back and forth between two buffers easily."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

* NUKE BUFFERS

#+BEGIN_SRC emacs-lisp
  (defun my/nuke-buffers ()
    "Kill all buffers, leaving *scratch* only."
    (interactive)
    (mapc
     (lambda (buffer)
       (kill-buffer buffer))
     (buffer-list))
    (if current-prefix-arg
        (delete-other-windows)))
#+END_SRC

* SAVE BUFFERS SILENTLY

#+BEGIN_SRC emacs-lisp
  (defun my/save-buffers-silently ()
    "Save all open buffers without prompting."
    (interactive)
    (save-some-buffers t)
    (message "Saving all buffers..."))
#+END_SRC

* SEARCH ALL BUFFERS

#+BEGIN_SRC emacs-lisp
  (defun my/search-all-buffers (regexp)
    "Search all buffers for REGEXP."
    (interactive "sRegexp: ")
    (multi-occur-in-matching-buffers "." regexp t))
#+END_SRC

* TOGGLE BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/toggle-buffer (buffer)
    "Toggle back & forth between BUFFER and the current buffer."
    (interactive "BBuffer: ")
    (if (equal (buffer-name) buffer)
        (my/last-buffer)
      (switch-to-buffer buffer)))
#+END_SRC

* TOGGLE MAXIMIZE BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/toggle-maximize-buffer ()
    "Temporarily maximize a buffer."
    (interactive)
    (if (= 1 (length (window-list)))
        (jump-to-register '_)
      (progn
        (window-configuration-to-register '_)
        (delete-other-windows))))
#+END_SRC

* KEYBINDINGS

#+BEGIN_SRC emacs-lisp
  (my/bind-always "C-<escape>" my/last-buffer)
  (my/bind-always "C-M-<escape>" my/toggle-buffer)
  (my/bind-always "C-c TAB" my/indent-buffer)
  (my/bind-always "C-c b i" my/indent-buffer)
  (my/bind-always "C-c z" my/toggle-maximize-buffer)
  (my/bind-always "C-c M-n" my/nuke-buffers)
  (my/bind-always "C-c s" my/save-buffers-silently)
  (my/bind-always "C-x k" my/kill-this-buffer)
  (my/bind-always "M-s s" my/search-all-buffers)
  (my/bind-always "C-c t m" (lambda () (interactive) (my/toggle-buffer "*Messages*")))
  (my/bind-always "C-c t s" (lambda () (interactive) (my/toggle-buffer "*scratch*")))
#+END_SRC
