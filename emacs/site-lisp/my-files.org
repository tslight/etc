#+TITLE: FILES FUNCTIONS
#+AUTHOR: Toby Slight
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle ~/.emacs.d/site-lisp/my-files.el
#+PROPERTY: header-args+ :tangle-mode (identity #o644)
#+OPTIONS: toc:t

* CONTENTS:TOC_5_gh:
- [[#delete-this-file][DELETE THIS FILE]]
- [[#copy-file-name-to-clipboard][COPY FILE NAME TO CLIPBOARD]]
- [[#make-backup][MAKE BACKUP]]
- [[#make-backup-and-save][MAKE BACKUP AND SAVE]]
- [[#rename-this-file-and-buffer][RENAME THIS FILE AND BUFFER]]
- [[#string-from-file][STRING FROM FILE]]
- [[#sudoedit][SUDOEDIT]]
- [[#keybindings][KEYBINDINGS]]

* DELETE THIS FILE

#+BEGIN_SRC emacs-lisp
  (defun my/delete-this-file ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (or (buffer-file-name) (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))
#+END_SRC

* COPY FILE NAME TO CLIPBOARD

#+BEGIN_SRC emacs-lisp
  (defun my/copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

* MAKE BACKUP

#+BEGIN_SRC emacs-lisp
  (defun my/make-backup ()
    "Make a backup copy of current file or dired marked files.  If
  in dired, backup current file or marked files."
    (interactive)
    (let (($fname (buffer-file-name)))
      (if $fname
          (let (($backup-name
                 (concat $fname "." (format-time-string "%y%m%d%H%M") ".bak")))
            (copy-file $fname $backup-name t)
            (message (concat "Backup saved at: " $backup-name)))
        (if (string-equal major-mode "dired-mode")
            (progn
              (mapc (lambda ($x)
                      (let (($backup-name
                             (concat $x "." (format-time-string "%y%m%d%H%M") ".bak")))
                        (copy-file $x $backup-name t)))
                    (dired-get-marked-files))
              (message "marked files backed up"))
          (user-error "Buffer not file nor dired")))))
#+END_SRC

* MAKE BACKUP AND SAVE

#+BEGIN_SRC emacs-lisp
  (defun my/make-backup-and-save ()
    "Backup of current file and save, or backup dired marked files.
  For detail, see `my/make-backup'."
    (interactive)
    (if (buffer-file-name)
        (progn
          (my/make-backup)
          (when (buffer-modified-p)
            (save-buffer)))
      (progn
        (my/make-backup))))
#+END_SRC

* RENAME THIS FILE AND BUFFER

#+BEGIN_SRC emacs-lisp
  (defun my/rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "FNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (when (file-exists-p filename)
            (rename-file filename new-name 1))
          (rename-buffer new-name)
          (set-visited-file-name new-name)))))
#+END_SRC

* STRING FROM FILE

#+begin_src emacs-lisp
(defun my/read-file (file)
  "Return `file' file content as a string."
  (with-temp-buffer
    (insert-file-contents file)
    (buffer-string)))
#+end_src

#+begin_src emacs-lisp
(defun my/read-lines (file)
  "Return a list of lines of a file at `file'."
  (with-temp-buffer
    (insert-file-contents file)
    (split-string (buffer-string) "\n" t)))
#+end_src

* SUDOEDIT

#+BEGIN_SRC emacs-lisp
  (defun my/sudoedit (&optional arg)
    "Open current or ARG file as root."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

* KEYBINDINGS

#+BEGIN_SRC emacs-lisp
  (my/bind-always "C-c f d" my/delete-this-file)
  (my/bind-always "C-c f c" my/copy-file-name-to-clipboard)
  (my/bind-always "C-c f b" my/make-backup-and-save)
  (my/bind-always "C-c f r" my/rename-this-file-and-buffer)
  (my/bind-always "C-c f s" my/sudoedit)
#+END_SRC
