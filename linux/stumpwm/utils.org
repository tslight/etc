#+TITLE: LEMONODOR-FAME IS BUT A HACK AWAY!
#+AUTHOR: Toby Slight

#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle ~/.stumpwm.d/utils.lisp
#+PROPERTY: header-args+ :tangle-mode (identity #o644)

Collection of functions & commands not complex enough to warrant turning into
modules.

http://dotshare.it/dots/219/
http://dotshare.it/dots/49/

* GROUP WINDOWLIST

#+BEGIN_SRC common-lisp
  (defcommand group-windowlist () ()
    "Windowlist showing all windows from all groups."
    (if-let ((window-list (sort-windows
                           (mapcan (lambda (s) (screen-windows s)) *screen-list*))))
      (if-let ((window (select-window-from-menu window-list *window-format*)))
        (focus-all window)
        (throw 'error :abort))
      (message "No Managed Windows")))
#+END_SRC

* GROUP MOVE

This defines two new StumpWM commands: my/gforward and my/gbackward that "move"
current group. It's quite handy when you have many groups and want to reorder
them.

#+BEGIN_SRC common-lisp
  (defun swap-groups (group1 group2)
    (rotatef (slot-value group1 'number) (slot-value group2 'number)))

  (defun move-group-forward (&optional (group (current-group)))
    (swap-groups group (next-group group (sort-groups (current-screen)))))

  (defun move-group-backward (&optional (group (current-group)))
    (swap-groups group (next-group group (reverse (sort-groups (current-screen))))))

  (defcommand my/gforward () ()
    (move-group-forward)
    (echo-groups (current-screen) *group-format*))

  (defcommand my/gbackward () ()
    (move-group-backward)
    (echo-groups (current-screen) *group-format*))
#+END_SRC

* MODELINE RAT

Cycle windows by scrolling and clicking on the modeline.

#+BEGIN_SRC common-lisp
  (defun modeline-click (modeline button x y)
    "Cycle windows by scrolling and clicking on the modeline."
    (let* ((screen (parse-integer
                    (ppcre:scan-to-strings
                     "[0-9]+(?=x[0-9]+x[0-9]+)"
                     (write-to-string (current-screen)))))
           (min 50) ;; pixels
           (mid (floor screen 2))
           (max (- screen min)))
      (cond
        ;; left corner of screen
        ((and (eq button 1) (<= x min))
         (run-commands "gprev"))
        ((and (eq button 3) (<= x min))
         (run-commands "gnext"))
        ((and (eq button 5) (<= x min))
         (run-commands "gnext"))
        ((and (eq button 4) (<= x min))
         (run-commands "gprev"))
        ;; left side of screen
        ((and (eq button 1) (> x min) (< x mid))
         (run-commands "prev"))
        ((and (eq button 3) (> x min) (< x mid))
         (run-commands "next"))
        ((and (eq button 4) (> x min) (< x mid))
         (run-commands "prev"))
        ((and (eq button 5) (> x min) (< x mid))
         (run-commands "next"))
        ;; right side of screen
        ((and (eq button 1) (> x mid) (< x max))
         (run-commands "next"))
        ((and (eq button 3) (> x mid) (< x max))
         (run-commands "prev"))
        ((and (eq button 4) (> x mid) (< x max))
         (run-commands "prev"))
        ((and (eq button 5) (> x mid) (< x max))
         (run-commands "next"))
        ;; right corner of screen
        ((and (eq button 1) (>= x max))
         (run-commands "gnext"))
        ((and (eq button 3) (<= x min))
         (run-commands "gprev"))
        ((and (eq button 5) (>= x max))
         (run-commands "gnext"))
        ((and (eq button 4) (>= x max))
         (run-commands "gprev")))))

  (add-hook *mode-line-click-hook* 'modeline-click)
#+END_SRC
* PROMPT

Taken from the example rc file.

Prompt the user for an interactive command. The first arg is an
optional initial contents.

#+BEGIN_SRC common-lisp
  (defcommand prompt (&optional (initial "")) (:rest)
    "prompt the user for an interactive command. The first arg is an optional
     initial contents."
    (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
      (when cmd
        (eval-command cmd t))))
#+END_SRC

* RELOAD++

Reload StumpWM and then re-load config.

#+BEGIN_SRC common-lisp
  (defcommand my/reload () ()
    "Reload StumpWM Configuration"
    (run-commands
     "reload"
     "loadrc"
     "redisplay"
     "refresh"
     "refresh-heads"))
#+END_SRC

* ROTATE WINDOWS

#+BEGIN_SRC common-lisp
  (defun shift-windows-forward (frames win)
    "Rotate Windows"
    (when frames
      (let ((frame (car frames)))
        (shift-windows-forward (cdr frames) (frame-window frame))
        (when win (pull-window win frame)))))

  (defcommand my/rotate-windows () ()
    (let* ((frames (group-frames (current-group)))
           (win (frame-window (car (last frames)))))
      (shift-windows-forward frames win)))
#+END_SRC

* RUN OR RAISE

#+BEGIN_SRC common-lisp
  (defcommand emacsclient () ()
    "run-or-raise emacs"
    (run-or-raise "emacsclient -c -a ''" '(:class "Emacs")))

  (defcommand lilytmux () ()
    "run-or-raise lilyterm with tmux"
    (run-or-raise
     "lilyterm -x bash -c 'tmux -q has-session && tmux attach -d || tmux -u'"
     '(:class "LilyTerm")))

  (defcommand kittmux () ()
    "run-or-raise kitty with tmux"
    (run-or-raise
     "kitty -e bash -c 'tmux -q has-session && tmux attach -d || tmux -u'"
     '(:class "kitty")))

  (defcommand urxvtmux () ()
    "run-or-raise urxvt with tmux"
    (run-or-raise
     "urxvt -e bash -c 'tmux -q has-session && tmux attach -d || tmux -u'"
     '(:class "URxvt")))

  (defcommand sttabbed () ()
    "run-or-raise a tabbed suckless terminal"
    (run-or-raise "tabbed -c -r 2 st -w ''" '(:class "tabbed")))

  (defcommand stterm () ()
    "run-or-raise suckless terminal"
    (run-or-raise "st" '(:class "st-256color")))

  (defcommand web-browser () ()
    "run-or-raise a web browser"
    (run-or-raise "x-www-browser" '(:role "browser")))

  (defcommand file-manager () ()
    "run-or-raise a graphical file manager"
    (run-or-raise "spacefm" '(:role "file_manager")))
#+END_SRC

* SHOW PREFIX

If you ever forget which key map you're in, this works kind of like Emacs'
mode-line except as messages. This is annoying for volume keys, etc..

#+BEGIN_SRC common-lisp :tangle no
  (defun show-key-seq (key seq val)
    (message (print-key-seq (reverse seq))))
  (add-hook *key-press-hook* 'show-key-seq)
#+END_SRC

* SWANK

Connect to StumpWM with Emacs' Slime mode

https://kaashif.co.uk/2015/06/28/hacking-stumpwm-with-common-lisp/

#+BEGIN_SRC common-lisp
  (require :swank)
  (swank-loader:init)
  (defcommand swank () ()
    "creates a swank server in the stumpwm lisp process"
    (setf *top-level-error-action* :break)
    (swank:create-server :port 4004
                         :style swank:*communication-style*
                         :dont-close t)
    (message (concat "^B^5Getting swanky...~%^n"
                     (encouragement:random-encouragement))))
#+END_SRC

* TOGGLE SPLIT

#+BEGIN_SRC common-lisp
  (defcommand my/toggle-split () ()
    (let* ((group (current-group))
           (cur-frame (tile-group-current-frame group))
           (frames (group-frames group)))
      (if (eq (length frames) 2)
          (progn (if (or (neighbour :left cur-frame frames)
                         (neighbour :right cur-frame frames))
                     (progn
                       (only)
                       (vsplit))
                     (progn
                       (only)
                       (hsplit))))
          (message "Works only with 2 frames"))))
#+END_SRC

* TOGGLE ONLY

#+BEGIN_SRC common-lisp
  (defcommand my/toggle-only () ()
    "Toggle only one frame & restore old frame layout."
    (let ((group-file (format nil "/tmp/stumpwm-group-~a" (group-name (current-group)))))
      (if (null (cdr (head-frames (current-group) (current-head))))
          (restore-from-file group-file)
          (progn
            (dump-group-to-file group-file)
            (only)))))
#+END_SRC

* WEB JUMP

Stolen from the default rc file.

#+BEGIN_SRC common-lisp
  (defmacro my/web-jump (name prefix)
    `(defcommand ,(intern name) (search)
         ((:rest ,(concatenate 'string name ": ")))
       (substitute #\+ #\Space search)
       (run-shell-command (concatenate 'string ,prefix "\"" search "\""))))

  (my/web-jump "google" "x-www-browser http://www.google.co.uk/search?q=")
  (my/web-jump "imdb" "x-www-browser http://www.imdb.com/find?q=")
  (my/web-jump "wikipedia" "x-www-browser http://en.wikipedia.org/wiki/")
  (my/web-jump "youtube" "x-www-browser http://youtube.com/results?search_query=")
#+END_SRC
